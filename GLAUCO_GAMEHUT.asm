;----------------------------------------------------------
;		GAMEHUT SHELL
;		BY JON BURTON - APR 2018
;----------------------------------------------------------
		INCLUDE	GLAUCO_SYSTEM.asm		;INCLUDES LOTS OF SYSTEM CODE TO MAKE ALL THIS POSSIBLE

;----------------------------------------------------------
;		VRAM MEMORY MAP IN HEXADECIMAL
;		(NOTE: CHARACTERS ARE 8 X 8 PIXEL BLOCKS)
;----------------------------------------------------------
;		$0000-$0020			BLANK CHARACTER
;		$0020-$8000			CHARACTERS FOR PLAYFIELDS AND SPRITES
;		$C000-$D000			CHARACTER MAP FOR PLAYFIELD 1 (4096 BYTES)
;		$E000-$F000			CHARACTER MAP FOR PLAYFIELD 2 (4096 BYTES)
;		$F800				SPRITE TABLE (960 BYTES)

;----------------------------------------------------------
;		USER VARIABLES
;		- PUT ANY VARIABLES YOU NEED HERE
;----------------------------------------------------------
		RSSET	USERRAM
PLAYX:		RS.L	0
PLAY1X:		RS.W	1			;X POSITION OF PLAYFIELD 1
PLAY2X:		RS.W	1			;X POSITION OF PLAYFIELD 2
PLAYY:		RS.L	0
PLAY1Y:		RS.W	1			;Y POSITION OF PLAYFIELD 1
PLAY2Y:		RS.W	1			;Y POSITION OF PLAYFIELD 2
SONICX:		RS.W	1			;SONIC X POSITION
SONICY:		RS.W	1			;SONIC Y POSITION
SONICH:		RS.W	1			;SONIC HORIZONTAL DIRECTION
SONICV:		RS.W	1			;SONIC VERTICAL DIRECTION
TEMPSCREEN:	RS.B	4096		;RAM TO BUILD TEMPORARY SCREEN MAP
ENDVARS:	RS.B	0
COLORSTATE	RS.W	0			;Criada pelo Glauco para controlar as paletas de cores quando um botao for pressionado
;----------------------------------------------------------
;		INITIALISE USER STUFF
;		- THIS IS WHERE YOU SET UP STUFF BEFORE YOU BEGIN
;----------------------------------------------------------
USERINIT:
		MOVE.W	#0,PLAY1X		;SET START PLAYFIELD 1 X POSITION TO ZERO
		MOVE.W	#0,PLAY1Y		;SET START PLAYFIELD 1 Y POSITION TO ZERO
		MOVE.W	#0,PLAY2X		;SET START PLAYFIELD 2 X POSITION TO ZERO
		MOVE.W	#0,PLAY2Y		;SET START PLAYFIELD 2 Y POSITION TO ZERO

;----------------------------------------------------------------------------------------------
		DMADUMP	MAPGFX,4*32,$0020			;DUMP 4 CHARACTERS (SIZE 32 BYTES EACH) TO VRAM LOCATION $20 (MAP GRAPHICS)

		LEA.L	TEMPSCREEN,A0	;POINT A0 TO TEMPORARY BUFFER IN RAM TO BUILD MAP BEFORE WE COPY TO VRAM
		MOVE.W	#8-1,D3			;WE WILL MAKE 8 COPIES OF THIS PATTERN
@L4:
		LEA.L	CHARGFX,A1		;POINT A1 TO CHARGFX, WHICH IS THE 8 CHARACTER X 4 CHARACTER PATTERN WE WILL COPY MULITPLE TIMES
		MOVE.W	#4-1,D1			;4 ROWS
@L3:
		MOVE.W	#8-1,D0			;COPY EACH ROW REPEATED ACROSS THE SCREEN 8 TIMES HORIZONTALLY
@L2:
		MOVE.W	#4-1,D2			;4 LONG-WORDS = 8 CHARACTERS WIDE
@L1:
		MOVE.L	(A1)+,(A0)+		;COPY FROM CHARGFX TO THE TEMPSCREEN. THE + MEANS INCREMENT THE POINTERS
		DBRA	D2,@L1			;LOOP BACK TO @L1
		SUB.L	#16,A1			;POINT BACK TO THE START OF THE CURRENT CHARGFX ROW
		DBRA	D0,@L2			;LOOP BACK TO @L2
		ADD.L	#16,A1			;MOVE ONTO THE NEXT CHARGFX ROW
		DBRA	D1,@L3			;LOOP BACK TO @L3
		DBRA	D3,@L4			;LOOP BACK TO @L4

		DMADUMP	TEMPSCREEN,4096,$C000	;COPY TEMPSCREEN WHICH IS 4096 BYTES IN SIZE TO VRAM ADDRESS $C000
		DMADUMP	TEMPSCREEN,4096,$E000	;COPY TEMPSCREEN WHICH IS 4096 BYTES IN SIZE TO VRAM ADDRESS $E000
		DMADUMP	SPRITEGFX,16*32,$1000	;DUMP 8 CHARACTERS (SIZE 32 BYTES EACH) TO VRAM LOCATION $1000 (SPRITE GRAPHICS)

		LEA.L	PALETTE7,A0	;DOWNLOAD A PALETTE FOR THE MAP TO USE
		BSR	SETPAL1			;OVERRIGHT FIRST PALETTE

		LEA.L	PALETTE7,A0	;DOWNLOAD A PALETTE FOR THE SPRITES TO USE
		BSR	SETPAL2			;OVERRIGHT SECOND PALETTE

		JSR	DUMPCOLS		;COPY ALL PALETTES TO CRAM (COLOUR RAM)

		MOVE.W	#$80+160-16,SONICX	;SONIC X START POSITION ($80 IS LEFT OF SCREEN + HALF SCREEN RESOLUTION - HALF WIDTH SONIC SPRITE)
		MOVE.W	#$80+112-16,SONICY	;SONIC Y START POSITION ($80 IS TOP OF SCREEN + HALF SCREEN RESOLUTION - HALF HEIGHT SONIC SPRITE)
		MOVE.W	#0,SONICH		;SONIC START HORIZONTAL DIRECTION
		MOVE.W	#0,SONICV		;SONIC START VERTICAL DIRECTION

		RTS

;------------------------------
;	MAIN GAME LOOP
;------------------------------
MAIN:
		WAITVBI					;WAITS FOR THE START OF THE NEXT FRAME
		ADD.W	#0,PLAY1X			;SCROLL PLAYFIELD 1 (ADD RIGHT / SUB LEFT) BY ONE PIXEL
		ADD.W	#0,PLAY1Y			;SCROLL PLAYFIELD 1 (ADD UP / SUB DOWN) BY ONE PIXEL
		ADD.W	#0,PLAY2X			;SCROLL PLAYFIELD 1 (ADD RIGHT / SUB LEFT) BY ONE PIXEL
		ADD.W	#0,PLAY2Y			;SCROLL PLAYFIELD 1 (ADD UP / SUB DOWN) BY ONE PIXEL

;ADD SPRITES
		LEA.L	SPRITETEMP,A1		;POINT TO TEMPORARY MEMORY TO BUILD SPRITE LIST

		MOVE.W	SONICY,(A1)+		;Y POSITION ($80 IS TOP OF SCREEN)
		MOVE.W	#S_4X4+1,(A1)+		;SIZE 2X4 CHARACTERS, NEXT SPRITE NUMBER = 1 (HOW BIG SPRITE AND SCALE)
		MOVE.W	#S_PAL2+$1000/32,D0	;PALETTE NUMBER+GRAPHIC VRAM LOCATION/32 (THE PALETTE OF SPRITE)
		ADD.W	SONICH,D0			;ADD SONIC HORIZONTAL DIRECTION
		ADD.W	SONICV,D0			;ADD SONIC VERTICAL DIRECTION
		MOVE.W	D0,(A1)+			;WRITE TO SPRITE TABLE
		MOVE.W	SONICX,(A1)+		;X POSITION ($80 IS LEFT OF SCREEN)

		MOVE.L	#$10000,(A1)+			;TERMINATE SPRITE LIST
		MOVE.L	#1,(A1)+			;	"  "

;MOVE SONIC
		BTST	#J_RIGHT,JOYPAD3
		BNE.S	@MOVE1
		MOVE.W	#0,SONICH
		SUB.W	#2,PLAY1X			;SCROLL PLAYFIELD 1 (ADD RIGHT / SUB LEFT) BY ONE PIXEL
		SUB.W	#2,PLAY2X			;SCROLL PLAYFIELD 2 (ADD RIGHT / SUB LEFT) BY ONE PIXEL
@MOVE1:
		BTST	#J_LEFT,JOYPAD3
		BNE.S	@MOVE2
		MOVE.W	#$800,SONICH
		ADD.W	#2,PLAY1X			;SCROLL PLAYFIELD 1 (ADD RIGHT / SUB LEFT) BY ONE PIXEL
		ADD.W	#2,PLAY2X			;SCROLL PLAYFIELD 2 (ADD RIGHT / SUB LEFT) BY ONE PIXEL
@MOVE2:
		BTST	#J_DOWN,JOYPAD3
		BNE.S	@MOVE3
		MOVE.W	#$1000,SONICV
		ADD.W	#2,PLAY1Y			;SCROLL PLAYFIELD 1 (ADD UP / SUB DOWN) BY ONE PIXEL
		ADD.W	#2,PLAY2Y			;SCROLL PLAYFIELD 2 (ADD UP / SUB DOWN) BY ONE PIXEL
@MOVE3:
		BTST	#J_UP,JOYPAD3
		BNE.S	@MOVE4
		MOVE.W	#0,SONICV
		SUB.W	#2,PLAY1Y			;SCROLL PLAYFIELD 1 (ADD UP / SUB DOWN) BY ONE PIXEL
		SUB.W	#2,PLAY2Y			;SCROLL PLAYFIELD 2 (ADD UP / SUB DOWN) BY ONE PIXEL
@MOVE4:
		BTST	#J_BUT_A,JOYPAD3
		BNE.S	@MOVE5
		; CYAN / RED
		LEA.L	PALETTE5,A0	;DOWNLOAD A PALETTE FOR THE MAP TO USE
		BSR	SETPAL1			;OVERRIGHT FIRST PALETTE
		LEA.L	PALETTE6,A0	;DOWNLOAD A PALETTE FOR THE SPRITES TO USE
		BSR	SETPAL2			;OVERRIGHT SECOND PALETTE
		JSR	DUMPCOLS		;COPY ALL PALETTES TO CRAM (COLOUR RAM)
		MOVE.W	#1,COLORSTATE
		BRA	MAIN				;LOOP BACK TO WAIT FOR NEXT FRAME
@MOVE5:
		BTST	#J_BUT_B,JOYPAD3
		BNE.S	@MOVE6
		; MAGENTA / GREEN
		LEA.L	PALETTE3,A0	;DOWNLOAD A PALETTE FOR THE MAP TO USE
		BSR	SETPAL1			;OVERRIGHT FIRST PALETTE
		LEA.L	PALETTE4,A0	;DOWNLOAD A PALETTE FOR THE SPRITES TO USE
		BSR	SETPAL2			;OVERRIGHT SECOND PALETTE
		JSR	DUMPCOLS		;COPY ALL PALETTES TO CRAM (COLOUR RAM)
		MOVE.W	#2,COLORSTATE
		BRA	MAIN				;LOOP BACK TO WAIT FOR NEXT FRAME
@MOVE6:
		BTST	#J_BUT_C,JOYPAD3
		BNE.S	@MOVE7
		; YELLOW / BLUE
		LEA.L	PALETTE1,A0	;DOWNLOAD A PALETTE FOR THE MAP TO USE
		BSR	SETPAL1			;OVERRIGHT FIRST PALETTE
		LEA.L	PALETTE2,A0	;DOWNLOAD A PALETTE FOR THE SPRITES TO USE
		BSR	SETPAL2			;OVERRIGHT SECOND PALETTE
		JSR	DUMPCOLS		;COPY ALL PALETTES TO CRAM (COLOUR RAM)
		MOVE.W	#3,COLORSTATE
		BRA	MAIN				;LOOP BACK TO WAIT FOR NEXT FRAME
@MOVE7:
		BTST	#J_BUT_S,JOYPAD3
		BNE.S	@MOVE8
		; WHITE
		LEA.L	PALETTE7,A0	;DOWNLOAD A PALETTE FOR THE MAP TO USE
		BSR	SETPAL1			;OVERRIGHT FIRST PALETTE
		LEA.L	PALETTE7,A0	;DOWNLOAD A PALETTE FOR THE SPRITES TO USE
		BSR	SETPAL2			;OVERRIGHT SECOND PALETTE
		JSR	DUMPCOLS		;COPY ALL PALETTES TO CRAM (COLOUR RAM)
		MOVE.W	#0,COLORSTATE
		BRA	MAIN				;LOOP BACK TO WAIT FOR NEXT FRAME
@MOVE8:
		BTST	#J_BUT_X,JOYPAD6
		BNE.S	@MOVE9
		; RED / CYAN
		LEA.L	PALETTE6,A0	;DOWNLOAD A PALETTE FOR THE MAP TO USE
		BSR	SETPAL1			;OVERRIGHT FIRST PALETTE
		LEA.L	PALETTE5,A0	;DOWNLOAD A PALETTE FOR THE SPRITES TO USE
		BSR	SETPAL2			;OVERRIGHT SECOND PALETTE
		JSR	DUMPCOLS		;COPY ALL PALETTES TO CRAM (COLOUR RAM)
		MOVE.W	#4,COLORSTATE
		BRA	MAIN				;LOOP BACK TO WAIT FOR NEXT FRAME
@MOVE9:
		BTST	#J_BUT_Y,JOYPAD6
		BNE.S	@MOVEA
		; GREEN / MAGENTA
		LEA.L	PALETTE4,A0	;DOWNLOAD A PALETTE FOR THE MAP TO USE
		BSR	SETPAL1			;OVERRIGHT FIRST PALETTE
		LEA.L	PALETTE3,A0	;DOWNLOAD A PALETTE FOR THE SPRITES TO USE
		BSR	SETPAL2			;OVERRIGHT SECOND PALETTE
		JSR	DUMPCOLS		;COPY ALL PALETTES TO CRAM (COLOUR RAM)
		MOVE.W	#5,COLORSTATE
		BRA	MAIN				;LOOP BACK TO WAIT FOR NEXT FRAME
@MOVEA:
		BTST	#J_BUT_Z,JOYPAD6
		BNE.S	@MOVEB
		; YELLOW / BLUE
		LEA.L	PALETTE2,A0	;DOWNLOAD A PALETTE FOR THE MAP TO USE
		BSR	SETPAL1			;OVERRIGHT FIRST PALETTE
		LEA.L	PALETTE1,A0	;DOWNLOAD A PALETTE FOR THE SPRITES TO USE
		BSR	SETPAL2			;OVERRIGHT SECOND PALETTE
		JSR	DUMPCOLS		;COPY ALL PALETTES TO CRAM (COLOUR RAM)
		MOVE.W	#6,COLORSTATE
		BRA	MAIN				;LOOP BACK TO WAIT FOR NEXT FRAME
@MOVEB:
		BTST	#J_BUT_M,JOYPAD6
		BNE.S	@MOVEC
		; WHITE
		LEA.L	PALETTE0,A0	;DOWNLOAD A PALETTE FOR THE MAP TO USE
		BSR	SETPAL1			;OVERRIGHT FIRST PALETTE
		LEA.L	PALETTE0,A0	;DOWNLOAD A PALETTE FOR THE SPRITES TO USE
		BSR	SETPAL2			;OVERRIGHT SECOND PALETTE
		JSR	DUMPCOLS		;COPY ALL PALETTES TO CRAM (COLOUR RAM)
		MOVE.W	#7,COLORSTATE
		BRA	MAIN				;LOOP BACK TO WAIT FOR NEXT FRAME
@MOVEC:
		BRA	MAIN				;LOOP BACK TO WAIT FOR NEXT FRAME


;----------------------------------------------------------
;		USER VBI ROUTINES
;		- PUT TIME CRITICAL CODE THAT MUST CALLED DURING THE VERTICAL BLANK HERE
;----------------------------------------------------------
USERVBI:
		LEA.L	VDP_DATA,A1
		LEA.L	VDP_CONTROL,A2
;SET HORIZONTAL OFFSETS
		MOVE.L	#$7C000003,(A2)
		MOVE.L	PLAYX,(A1)		;THIS TELLS THE VDP (VISUAL DISPLAY PROCESSOR) WHAT X POSITION THE PLAYFIELDS SHOULD BE AT

;SET VERTICAL OFFSETS
		MOVE.L	#$40000010,(A2)		;THIS TELLS THE VDP WHAT Y POSITION THE PLAYFIELDS SHOULD BE AT
		MOVE.L	PLAYY,(A1)

;COPY SPRITE TABLE TO VRAM
		JSR	SPRITEDUMP
;READ JOYPAD
		BSR	READJOYSTICK			;READ THE JOYPAD

		RTS

;----------------------------------------------------------
;		PUT DATA BELOW HERE
;----------------------------------------------------------

		INCLUDE GLAUCO_PLANE_CHARGFX.asm
		INCLUDE	GLAUCO_PLANE_MAPGFX.asm		;INCLUDES LOTS OF SYSTEM CODE TO MAKE ALL THIS POSSIBLE
		INCLUDE	GLAUCO_SPRITES.asm		;INCLUDES LOTS OF SYSTEM CODE TO MAKE ALL THIS POSSIBLE
		INCLUDE	GLAUCO_PALETTES.asm		;INCLUDES LOTS OF SYSTEM CODE TO MAKE ALL THIS POSSIBLE

